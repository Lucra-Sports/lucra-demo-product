import { Response } from "express";
import { db } from "../database";
import logger from "../logger";
import { ExtendedRequest } from "../middlewares";
import {
  RngResponse,
  StatsResponse,
  NumbersListResponse,
  ErrorResponse,
} from "../types";

/**
 * @swagger
 * /rng:
 *   get:
 *     summary: Generate random number
 *     description: Generate a random number between 1 and 10000 for the authenticated user
 *     tags: [Numbers]
 *     security:
 *       - UserAuth: []
 *     responses:
 *       200:
 *         description: Random number generated successfully
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/RngResponse'
 *       401:
 *         description: Unauthorized - User ID header required
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       404:
 *         description: User not found
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
export const generateRandomNumber = async (
  req: ExtendedRequest,
  res: Response<RngResponse | ErrorResponse>
): Promise<void> => {
  try {
    const userId = parseInt(req.userId!, 10);
    const random = Math.floor(Math.random() * 10000) + 1;

    const result = await db.createNumber(userId, random);

    res.json({
      number: result.value,
      created_at: result.createdAt,
    });
  } catch (error) {
    logger.error(`RNG error: ${(error as Error).message}`);
    res.status(500).json({ error: "Internal error" });
  }
};

/**
 * @swagger
 * /stats:
 *   get:
 *     summary: Get user statistics
 *     description: Get statistics for the authenticated user including total numbers generated and best number
 *     tags: [Numbers]
 *     security:
 *       - UserAuth: []
 *     responses:
 *       200:
 *         description: User statistics retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/StatsResponse'
 *       401:
 *         description: Unauthorized
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       404:
 *         description: User not found
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
export const getUserStats = async (
  req: ExtendedRequest,
  res: Response<StatsResponse | ErrorResponse>
): Promise<void> => {
  try {
    const userId = parseInt(req.userId!, 10);
    const stats = await db.getUserStats(userId);
    res.json(stats);
  } catch (error) {
    logger.error(`Stats error: ${(error as Error).message}`);
    res.status(500).json({ error: "Internal error" });
  }
};

/**
 * @swagger
 * /numbers:
 *   get:
 *     summary: Get paginated number history
 *     description: Get paginated list of numbers generated by the authenticated user
 *     tags: [Numbers]
 *     security:
 *       - UserAuth: []
 *     parameters:
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *           default: 25
 *         description: Number of items per page
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *           default: 1
 *         description: Page number
 *     responses:
 *       200:
 *         description: Number history retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/NumbersListResponse'
 *       401:
 *         description: Unauthorized
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       404:
 *         description: User not found
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
export const getNumbersHistory = async (
  req: ExtendedRequest,
  res: Response<NumbersListResponse | ErrorResponse>
): Promise<void> => {
  try {
    const userId = parseInt(req.userId!, 10);

    // Ensure limit and page are positive, sane integers
    const toPositiveInt = (
      value: string | undefined,
      defaultValue: number
    ): number => {
      if (!value) return defaultValue;
      const n = parseInt(value, 10);
      return Number.isSafeInteger(n) && n > 0 ? n : defaultValue;
    };

    const MAX_LIMIT = 100;
    const limit = Math.min(
      toPositiveInt(req.query.limit as string, 25),
      MAX_LIMIT
    );
    const page = toPositiveInt(req.query.page as string, 1);

    const result = await db.getUserNumbers(userId, { limit, page });

    const nextPage =
      page < result.totalPages
        ? `${req.protocol}://${req.get("host")}${
            req.path
          }?limit=${limit}&page=${page + 1}`
        : null;

    res.json({
      numbers: result.numbers,
      page,
      totalPages: result.totalPages,
      next: nextPage,
    });
  } catch (error) {
    logger.error(`Numbers list error: ${(error as Error).message}`);
    res.status(500).json({ error: "Internal error" });
  }
};
